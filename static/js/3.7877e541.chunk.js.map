{"version":3,"sources":["components/ReactPortal/index.js","components/Input/index.js","modules/StartModal/index.js"],"names":["ReactPortal","children","wrapperId","useState","wrapperElement","setWrapperElement","useLayoutEffect","element","document","getElementById","systemCreated","createElement","setAttribute","body","appendChild","createWrapperAndAppendToBody","parentNode","removeChild","createPortal","Input","value","onChange","maxLength","autofocus","className","type","name","id","required","autoComplete","autoFocus","htmlFor","colorsList","StartModal","observer","isOpen","handleClose","usersColorsList","useMemo","gameStore","playersList","map","item","color","filteredColorsList","filter","includes","checkedColor","setCheckedColor","username","setUsername","event","target","onClick","addPlayer","uid","uuid","points"],"mappings":"yMAsCeA,MA5Bf,SAAqB,GAAmD,IAAjDC,EAAQ,EAARA,SAAS,EAAD,EAAEC,iBAAS,MAAG,uBAAsB,EACjE,EAA4CC,mBAAS,MAAK,mBAAnDC,EAAc,KAAEC,EAAiB,KAsBxC,OApBAC,2BAAgB,WACd,IAAIC,EAAUC,SAASC,eAAeP,GAClCQ,GAAgB,EASpB,OANKH,IACHG,GAAgB,EAChBH,EAjBN,SAAsCL,GACpC,IAAME,EAAiBI,SAASG,cAAc,OAG9C,OAFAP,EAAeQ,aAAa,KAAMV,GAClCM,SAASK,KAAKC,YAAYV,GACnBA,CACT,CAYgBW,CAA6Bb,IAEzCG,EAAkBE,GAEX,WAEDG,GAAiBH,EAAQS,YAC3BT,EAAQS,WAAWC,YAAYV,EAEnC,CACF,GAAG,CAACL,IAGmB,OAAnBE,EAAgC,KAE7Bc,uBAAajB,EAAUG,EAChC,E,eCVee,EAtBD,SAAH,GAA2D,IAArDC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAAU,EAAD,EAAEC,iBAAS,OAAQ,EAC5D,OACE,sBAAKC,UAAU,kBAAiB,UAC9B,uBACEC,KAAK,OACLC,KAAK,OACLF,UAAU,WACVG,GAAG,MACHC,UAAQ,EACRC,aAAa,MACbP,UAAWA,EACXF,MAAOA,EACPC,SAAUA,EACVS,UAAWP,IAEb,uBAAOQ,QAAQ,MAAK,SAClB,yDAIR,E,wBCdMC,EAAa,CAAC,QAAS,OAAQ,MAAO,UAEtCC,EAAaC,aAAS,YAAkC,IAA/BC,EAAM,EAANA,OAAQC,EAAW,EAAXA,YAAaT,EAAE,EAAFA,GAC5CU,EAAkBC,mBACtB,kBAAMC,IAAUC,YAAYC,KAAI,SAACC,GAAI,OAAKA,EAAKC,KAAK,GAAC,GACrD,CAACJ,IAAUC,cAEPI,EAAqBN,mBACzB,kBAAMN,EAAWa,QAAO,SAACH,GAAI,OAAML,EAAgBS,SAASJ,EAAK,GAAC,GAClE,CAACL,IAGH,EAAwClC,mBAASyC,EAAmB,IAAG,mBAAhEG,EAAY,KAAEC,EAAe,KACpC,EAAgC7C,mBAAS,IAAG,mBAArC8C,EAAQ,KAAEC,EAAW,KAgD5B,OAAKf,EAGH,cAAC,EAAW,CAACjC,UAAU,2BAA0B,SAC/C,qBAAKsB,UAAU,cAAa,SAC1B,sBAAKA,UAAU,gBAAe,UAC5B,qBAAKA,UAAU,mBAAkB,SAC/B,cAAC,EAAK,CACJF,UAAW,GACXF,MAAO6B,EACP5B,SAxBS,SAAC8B,GACpBD,EAAYC,EAAMC,OAAOhC,MAC3B,EAuBYG,WAAS,MAGb,qBAAKC,UAAU,gBAAe,SAC5B,qBAAKA,UAAU,eAAc,SAC1BoB,EAAmBH,KAAI,SAACC,GAAI,OAC3B,qBAEElB,UAAS,UAAKkB,EAAI,YAChBA,IAASK,EAAe,UAAY,IAEtCM,QAAS,kBAAML,EAAgBN,EAAK,GAAC,gBAJvBA,GAKd,QAIR,qBAAKlB,UAAU,YAAW,SACxB,wBAAQA,UAAU,cAAc6B,QA1EtB,WACdN,GAAgBE,IAClBK,YAAU3B,EAAI,CACZsB,WACAN,MAAOI,EACPQ,IAAKhB,IAAUiB,KACfC,OAAQ,IASVrB,IAeJ,EA4C+D,2BA5B3C,IAoCtB,IAEeH,W","file":"static/js/3.7877e541.chunk.js","sourcesContent":["import { useState, useLayoutEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nfunction createWrapperAndAppendToBody(wrapperId) {\n  const wrapperElement = document.createElement(\"div\");\n  wrapperElement.setAttribute(\"id\", wrapperId);\n  document.body.appendChild(wrapperElement);\n  return wrapperElement;\n}\n\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }) {\n  const [wrapperElement, setWrapperElement] = useState(null);\n\n  useLayoutEffect(() => {\n    let element = document.getElementById(wrapperId);\n    let systemCreated = false;\n    // if element is not found with wrapperId or wrapperId is not provided,\n    // create and append to body\n    if (!element) {\n      systemCreated = true;\n      element = createWrapperAndAppendToBody(wrapperId);\n    }\n    setWrapperElement(element);\n\n    return () => {\n      // delete the programatically created element\n      if (systemCreated && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    };\n  }, [wrapperId]);\n\n  // wrapperElement state will be null on very first render.\n  if (wrapperElement === null) return null;\n\n  return createPortal(children, wrapperElement);\n}\n\nexport default ReactPortal;\n","import React from \"react\";\n\nimport \"./style.scss\";\n\nconst Input = ({ value, onChange, maxLength, autofocus = false }) => {\n  return (\n    <div className=\"input_container\">\n      <input\n        type=\"text\"\n        name=\"name\"\n        className=\"question\"\n        id=\"nme\"\n        required\n        autoComplete=\"off\"\n        maxLength={maxLength}\n        value={value}\n        onChange={onChange}\n        autoFocus={autofocus}\n      />\n      <label htmlFor=\"nme\">\n        <span>What's your name?</span>\n      </label>\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { useState, useMemo } from \"react\";\n\nimport \"./style.scss\";\n\nimport ReactPortal from \"../../components/ReactPortal\";\nimport Input from \"../../components/Input\";\nimport { observer } from \"mobx-react-lite\";\nimport gameStore from \"../../store/game\";\nimport { addPlayer } from \"../../firebase/game\";\n\nconst colorsList = [\"green\", \"blue\", \"red\", \"yellow\"];\n\nconst StartModal = observer(({ isOpen, handleClose, id }) => {\n  const usersColorsList = useMemo(\n    () => gameStore.playersList.map((item) => item.color),\n    [gameStore.playersList]\n  );\n  const filteredColorsList = useMemo(\n    () => colorsList.filter((item) => !usersColorsList.includes(item)),\n    [usersColorsList]\n  );\n\n  const [checkedColor, setCheckedColor] = useState(filteredColorsList[0]);\n  const [username, setUsername] = useState(\"\");\n\n  const handleClick = () => {\n    if (checkedColor && username) {\n      addPlayer(id, {\n        username,\n        color: checkedColor,\n        uid: gameStore.uuid,\n        points: 0,\n      });\n\n      // if (ongoingGame) {\n      //   // updateDoc(doc(db, \"game_rooms_poker\", id), {\n      //   //   midgame_player_uid: arrayUnion(uuid),\n      //   // });\n      // }\n\n      handleClose();\n    } else {\n      if (!username) {\n        // setToast({\n        //   type: \"danger\",\n        //   text: \"Enter your username\",\n        // });\n      }\n      if (!checkedColor) {\n        // setToast({\n        //   type: \"danger\",\n        //   text: \"Select the icon\",\n        // });\n      }\n    }\n  };\n\n  const handleChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  // React.useEffect(() => {\n  //   if (isOpen) {\n  //     document.body.style.overflow = \"hidden\";\n  //   }\n  //\n  //   return () => {\n  //     document.body.style.overflow = \"auto\";\n  //   };\n  // }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  return (\n    <ReactPortal wrapperId=\"react-portal-start-modal\">\n      <div className=\"start-modal\">\n        <div className=\"modal-content\">\n          <div className=\"input_name_block\">\n            <Input\n              maxLength={12}\n              value={username}\n              onChange={handleChange}\n              autofocus\n            />\n          </div>\n          <div className=\"content_block\">\n            <div className=\"colors_block\">\n              {filteredColorsList.map((item) => (\n                <div\n                  key={`color-${item}`}\n                  className={`${item} ${\n                    item === checkedColor ? \"checked\" : \"\"\n                  }`}\n                  onClick={() => setCheckedColor(item)}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"btn_block\">\n            <button className=\"main_button\" onClick={handleClick}>\n              Join\n            </button>\n          </div>\n        </div>\n      </div>\n    </ReactPortal>\n  );\n});\n\nexport default StartModal;\n"],"sourceRoot":""}